<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: article | My Octopress Blog]]></title>
  <link href="http://jhubert.github.io/blog/categories/article/atom.xml" rel="self"/>
  <link href="http://jhubert.github.io/"/>
  <updated>2013-05-03T10:03:55-07:00</updated>
  <id>http://jhubert.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tips around Vancouver, Canada]]></title>
    <link href="http://jhubert.github.io/blog/2011/09/22/tips-around-vancouver/"/>
    <updated>2011-09-22T00:00:00-07:00</updated>
    <id>http://jhubert.github.io/blog/2011/09/22/tips-around-vancouver</id>
    <content type="html"><![CDATA[<p>I love Vancouver, and frequently have people ask me for recommendations. Instead of writing this all down every time, here they are for reference:</p>




<p>Vera&#8217;s Burgers. The burgers are just straight up delicious. My favorite location is on Davie St at the beginning of the gay district. I personally love the pilgrim (turkey burger) but pretty much anything you try is great. You pick all of your own toppings, and they have plenty to choose from. Price: $8 - 10 per person</p>




<p>Cactus Club Cafe. I love this Canadian restaurant chain. It was started in Vancouver years ago and it&#8217;s now one of the most profitable restaurant chains in Canada. Good food at a reasonable price with great service in a trendy venue. It&#8217;s my favorite one size fits all place to go. If you go, try a Bellini and some west coast pockets.</p>




<p>Hapa Izakaya or Guu. Both restaurants deliver great japanese fusion. Hapa Izakaya is a little more on the classy / expensive side while Guu is on the &#8220;What did I just eat? It was Delicious!!&#8221; loud asian side. Hapa Izakaya is a safe bet for some great fusion if you&#8217;re timid about what you eat. Personally, I prefer Guu because I love the energy and I find the crazy food to be amazing. That being said, I&#8217;ve taken people there who were less adventurous and didn&#8217;t quite enjoy it like I do. It&#8217;s hard to suggest menu items at either place because they change often and are usually seasonal but if you go to Guu and they have Octopus Balls (Balls of Octopus meat), I highly recommend you try them. It&#8217;s just like being in Japan. :)</p>




<p>SUSHI! You will find good sushi practically everywhere. Rumor has it that sushi chefs from Japan come over to Vancouver in order to practice because we all eat Sushi rolls far more frequently. I believe it. I have had more fantastic Sushi in Vancouver than any city I&#8217;ve ever been to.. including Tokyo. Now, that being said, there is a wide range of quality. Some of my personal favorites are Kadoya on Davie Street (near Vera&#8217;s) and Tanpopo on Denman St. I go to Kadoya when I&#8217;m looking for fun, creative rolls with plenty of yummy. Tanpopo, however, has a great all you can eat weekend lunch for only $13.50. For the last 5 years, we have had a standing Sunday brunch at Tanpopo with anyone who happens to be in town. It&#8217;s tradition. :)</p>




<p>Japadog. Continuing the Japan craze, Japadog makes hot dogs with a japanese twist. My wife and I went there once and while I thought they were pretty good, she wasn&#8217;t a fan. I admit, fishy tasting hot dogs is probably not for everyone&#8230; but this place has garnered a lot of celebrity endorsements and has been featured on a couple of food tv shows. Not bad for a hot dog stand on the side of the street. You may want to check it out just to say you tried it. <a href="http://www.japadog.com/en/">http://www.japadog.com/en/</a></p>




<p>Poutine. Ok, so.. if you haven&#8217;t heard of Poutine, bear with me. You take some perfectly golden french fries, cover them in fresh cheese curds and then pour on hot, delicious gravy. Anyone who doesn&#8217;t think fat, fat and fries would taste good needs their head checked. La Belle Patate on Davie and Bute is the place to go. It&#8217;s a Belgian fry house that serves nothing but french fries. Great late night food. I highly recommend you check it out&#8230; it&#8217;s about the only &#8220;canadian&#8221; food I can think of.</p>




<p>Carderos. Now we&#8217;re on the fancy side of town. Carderos is an upscale restaurant in Coal Harbour, right on the water. Great food and you&#8217;ll be looking out over the water at boats and trees. What more could you ask for? Try the seafood. <a href="http://www.vancouverdine.com/carderos0experience.aspx">http://www.vancouverdine.com/carderos0experience.aspx</a></p>




<p>Elbow Room Cafe. This is hands down my favorite breakfast place in Vancouver. Run by two old gay men, the restaurant specializes in good food and verbal abuse. It&#8217;s kind of hard to explain in words, but if you find yourself looking for a good breakfast I recommend you experience it for yourself.</p>




<p>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;-</p>




<p>Wow.. ok, that&#8217;s enough about food. I just sort of brain dumped. You should be able to google any of those restaurants for more information, and they&#8217;re all well known enough that a concierge or stranger could help you find them. Also, I&#8217;ve been away for a while so I may not be giving you the latest and greatest.</p>




<p>As for things to do, I mostly just recommend places to go. Robson St is the shopping district. Granville St is the main clubbing area. Yaletown is the more upscale restaurants and nightclubs. The Stanley Park seawall is pretty awesome. Check out the Denman and Davie area. I also recommend heading over to Kitsilano Beach and 4th ave. Vancouver has plenty of diversity, from beaches to museums. Take it all in.</p>




<p>Plenty of people seem to like the Capilano Suspension Bridge. The suspension bridge hangs over the Capilano river and can be exciting if you&#8217;re a little nervous about heights and they have a nice nature walk with some details of the area. Honestly, it&#8217;s all a little too safe for my liking. I prefer to visit the Lynn Valley one. The bridge is far more unstable and the trip is cheaper.</p>




<p>If you&#8217;re looking for great views, you can either catch the gondola up Grouse Mountain ($40 each) or drive up to the lookout on the way to Cypress Mountain (Free + Gas). If you&#8217;re a hiker and want to really get a workout, the Grouse Grind is a fun challenge. It take about an 90 minutes if you&#8217;re in good shape. (<a href="http://en.wikipedia.org/wiki/Grouse_Mountain#Grouse_Grind">http://en.wikipedia.org/wiki/Grouse_Mountain#Grouse_Grind</a>) If you want nice views but don&#8217;t feel like leaving the city, check out one of the rotating restaurants. Personally, I&#8217;ve never eaten at them, instead preferring to just eat somewhere delicious nearby and grabbing an afternoon or evening drink there while enjoying the views.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Delete all tasks in a Wunderlist]]></title>
    <link href="http://jhubert.github.io/blog/2011/09/02/delete-all-tasks-in-a-wunderlist/"/>
    <updated>2011-09-02T00:00:00-07:00</updated>
    <id>http://jhubert.github.io/blog/2011/09/02/delete-all-tasks-in-a-wunderlist</id>
    <content type="html"><![CDATA[<p>I&#8217;ve been experimenting with a CulturedCode Things -&gt; Wunderlist import tool, and it&#8217;s resulted in a few mix ups that left hundreds of items not where I wanted them. Instead of being filed in their own list, they are sitting in the inbox. Because it&#8217;s the inbox, I can&#8217;t just delete the list. To delete them all, I would have to click on each one and confirm the prompt. Kind of a pain in the butt.</p>




<p>Now, Wunderlist doesn&#8217;t have an API, but what they do have is a web based version of the tool. So, I figured that I could inspect their code and then write some JavaScript to do the deletion for me. Turns out I was right.</p>




<p>Here is the code I came up with. In order to use it, I&#8217;ve turned it into a bookmarklet. Just drag the following link up to your Bookmarks bar in the browser. When you open up a list in Wunderlist and click on the bookmarklet, it will confirm that you want to proceed before removing all of the items.</p>




<p><a href="javascript:(function%20()%7Bfunction%20deleteAll()%7Bvar%20list=%24('ul#list'),list_id=parseInt(%24(list%5B0%5D).attr('rel'),10),list_name=%24('#list'+list_id+'%20b').html();if(list_id&gt;0)%7Bif(confirm('Are%20you%20sure%20you%20want%20to%20delete%20all%20the%20items%20in%20'+list_name))%7Blist.find('li').each(function%20()%7Bvar%20id=parseInt(%24(this).attr('id'),10),task=%7Bid:id,list_id:list_id,deleted:1%7D;%24.ajax(%7Burl:'/ajax/tasks/update/',type:'POST',data:%7B'task':JSON.stringify(task)%7D,success:function%20(response_data,text,xhrobject)%7Bvar%20response=ajaxresponse.check(response_data);if(response.status==='success')%7Bwunderlist.updateBadgeCount();%7D%7D%7D);%7D);alert('Done.%20Please%20reload%20the%20page.');%7D%7D%7DdeleteAll();%7D());">Delete All Wunderlist Items in a List</a></p>




<p>If you&#8217;re curious about the actual code, you can check it out in this gist: <a href="https://gist.github.com/1188744">Delete all wunderlist items in a list</a>.</p>




<p>If you have any questions, just let me know. :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 reasons I use Git instead of SVN]]></title>
    <link href="http://jhubert.github.io/blog/2011/01/14/why-i-use-git-vs-svn/"/>
    <updated>2011-01-14T00:00:00-08:00</updated>
    <id>http://jhubert.github.io/blog/2011/01/14/why-i-use-git-vs-svn</id>
    <content type="html"><![CDATA[<p>This was a response to an email from a friend about why he should switch to Git from SVN. Perhaps you&#8217;ll find it useful as well. :)</p>




<p>&#8212;&#8212;&#8212;-</p>




<p>Three things come to mind right away:</p>




<p><strong>1) Distributed instead of centralized.</strong></p>




<p>With SVN, there is one &#8220;true&#8221; copy of the code at all times. Everyone checks out the code from this one true copy and checks the code back in when you&#8217;re done. There is nothing wrong with this, and in fact, this is also what you will also usually have with Git. The big difference is that you don&#8217;t *HAVE* to have it with Git if you don&#8217;t want to.</p>




<p>For example, with OnceOvers, Dan and I work off of the development installation that is up on Heroku. This acts as the &#8220;true&#8221; copy right now, meaning that Dan and I both check out  a complete version from the one on the server and push code back into it. This works great for now and is essentially the same as what you would have with SVN.</p>




<p>However, as soon as we are ready to take the site live, I will be pushing the site to a production installation hosted somewhere else. This is now the production instance of our website, instead of the development one. The map looks something like this: </p>




<p><img src="http://cl.ly/0C313S1x3f2N291A1y3X/Screen_shot_2011-01-14_at_6.00.30_PM.png" width="462" height="302"/></p>




<p>So that means that Dan and I can keep pushing and pulling from the development server without worry. When we want to take whatever we have live, we just push the current state to the production server. Additionally, I can also keep another copy of it on GitHub (or any git server) with only a single command.</p>




<p>Also, because of the distributed architecture, I can keep pieces of the code in all sorts of places. So, if I wanted to OpenSource a portion of the application but keep another portion of it closed, that&#8217;s super easy.</p>




<p>The distributed piece is also interesting because you don&#8217;t need an internet connection to check in some changes. The advantage to checking in changes is that you can see where they were and roll back to that point in the future. (Kind of a like a checkpoint in Mario) If you are working in SVN, you need to commit the changes to the server before breaking the whole page again or else you might lose your progress. With git, you can check in to the repository on your laptop as many times as you want without needing to connect to the internet, so you can wipe the whole file and be right back where you were within seconds. When you do get to an internet connection, you can just &#8220;git push&#8221; it to the remote server.</p>




<p>Speaking of the remote server, because both copies of the repository are full copies, you don&#8217;t have to worry about losing the repository if the hard drive on the server crashes. You just specify a new remote repo and you&#8217;re back up and running in minutes with all of the history still intact. I&#8217;ve done this a number of times just when moving to a new hosting provider.</p>




<p><strong>2) Super easy to create branches of your work to try new things</strong></p>




<p>Now, all this is fine and dandy and not really that compelling since most of it can be done with SVN. However, where it gets really powerful is branching and merging. </p>




<p>As a programmer, even when I&#8217;m working with HTML / CSS, I might try some crazy new idea that involves editing a bunch of files even though I&#8217;m not sure it&#8217;s going to work. With SVN, because I&#8217;m working from a server copy, I would either have to checkout the entire repo into another folder and do all my craziness or I would have to start working on it and change all of my files knowing that it would be a pain in the but to go back to the beginning. With SVN this also restricts me from making little changes while in the middle of a big change.</p>




<p>Lets say you&#8217;re working on a site for a client and you want to move the entire HTML / CSS structure over to HTML5 / Eric Meyer Reset from XHTML 4.1 / YUI Reset. You start work and get about 3/4 done when the client calls and says there is a typo on the live site that needs to be fixed immediately. How do you go back to the live copy and make the little change when you&#8217;re in the middle of a big change? With SVN, you would checkout a new version of the repo, make the change and check it back in. Here are three ways to do it with Git, in order of complexity.</p>




<ol><li>&#8220;git stash&#8221; will literally stash all changes that you have made and revert the files back to their last commit state, as if you had just downloaded them. You can make the little change, check it in and push it to the server. When you&#8217;re ready to get back to work, you just type &#8220;git stash apply&#8221; and you are back to where you were. With SVN you can do this with a diff / patch workflow, but it&#8217;s a bit more cumbersome than just typing stash. (Thanks @snookca for the reminder)</li>

<li>&#8220;git add -p filewithtypo.html&#8221; will send you into interactive / partial mode. If there are multiple edits in a file but you just want to check in one of them, this will allow you to pick which one and check it in, instead of checking in the whole file. It&#8217;s awesome. :)</li>

<li>Branching. With SVN, branching was kind of a pain in the ass. A bunch of smart people who use SVN seem to think it was easy enough, but I never really used it because it always broke or screwed something up. I guess I just wasn&#8217;t smart enough. Anyway, branching and merging in git is really straight forward. Lets say you want to work on the HTML5 rewrite. You can run &#8220;git branch html5&#8221; and it will create a new space for you to work. To work in that space, just type &#8220;git checkout html5&#8221; and you are now in the html5 branch. You start making your changes and then get the call from the client about the typo. All you do is type &#8220;git checkout master&#8221; and you&#8217;re back in the clean branch pre-changes. You fix the typo, check it in, push it to the server and then type &#8220;git checkout html5&#8221; to get back to work. When you are done making all of the HTML5 changes, you can run &#8220;git checkout master&#8221; to get back to the clean branch and then type &#8220;git merge html5&#8221; to apply all the changes that you made. It&#8217;s that easy. This also lets you work on totally separate features at the same time without any conflicts since you can have as many branches as you want. No pushing or pulling necessary to switch. :)</li>

</ol>


<p><strong>3) Cleaner and smaller folder sizes</strong></p>




<p>With SVN, you get all those annoying .svn folders created in your folder structure. If one of the folders get messed up, you&#8217;re in trouble. The folders hold the &#8220;clean&#8221; copy of every file so that you can revert back to it whenever you want. If you have made changes and then somehow screw up the .svn folder, you have to do a diff of your changes, svn up and the patch the files back together. Kind of a pain in the butt. That also means that every file you checkout is duplicated.</p>




<p>With Git, there is only one folder created at the root of your project directory called &#8220;.git&#8221; and it holds all of the information about the repo. Instead of storing full copies of all the files, it stores diffs from one version to another. So, it only stores records of the changes. This lets you literally &#8220;play back&#8221; the changes that you&#8217;ve made over a number of commits. This is why it is so much easier to branch and merge files. Since diff files can be fuzzy, you don&#8217;t have to compare exact copies every times which results in less collisions. Also, the diffs are generally much smaller in size than an actual file, so you save space.</p>




<p>&#8212;</p>




<p>That about sums it up. As for why you would use this instead of SVN, that choice is totally up to you and SVN is still a darn good version control system.</p>




<p>Versions is probably the best OSX visual version control application out there, although Tower is making progress on providing a Git one ( <a href="http://www.git-tower.com/">http://www.git-tower.com/</a> ) and Gitbox is already fairly mature ( <a href="http://www.gitboxapp.com/">http://www.gitboxapp.com/</a> ). As for Kaleidoscope, it works with Git as well and ties into Gitbox already.</p>




<p>Personally, I like using the command line. I just find it so easy that I haven&#8217;t found a reason not to use it yet.</p>




<p>I hope that answers some of your questions. :)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 21 best new-ish songs that I don't think enough people have heard]]></title>
    <link href="http://jhubert.github.io/blog/2011/01/14/21-songs-everyone-should-hear/"/>
    <updated>2011-01-14T00:00:00-08:00</updated>
    <id>http://jhubert.github.io/blog/2011/01/14/21-songs-everyone-should-hear</id>
    <content type="html"><![CDATA[<p>The other day, I was hanging out with some co-workers of mine and we started talking about music. It turns out the neither of them had heard many of the songs that I was really into lately. I promised to introduce one of them to my musical tastes, and went home to make a CD.</p>




<p>I then started playing the CD for a few other friends, and it turned out that NONE of them had heard most of the tracks on the CD. Had they not all really liked the CD, I would have just written myself as having odd taste in music. But since they did, I&#8217;m writing this post to make sure everyone else can be exposed to the more awesome music.</p>




<p>Another thing that I realized after looking over the album is that almost all of the songs were introduced to me by <a href="http://about.me/msh">Morgan Holzer</a>. That girl has wicked taste in music and I highly recommend you check out <a href="http://www.popten.net/author/morgan-holzer/">her PopTen stuff</a>. </p>




<ol><li><a href="http://jeremyhubert.com/m/2010/1.mp3">Sweet Disposition - The Temper Trap</a></li>

<li><a href="http://jeremyhubert.com/m/2010/2.mp3">Animal - Miike Snow</a></li>

<li><a href="http://jeremyhubert.com/m/2010/3.mp3">Heart Skipped A Beat - The xx</a></li>

<li><a href="http://jeremyhubert.com/m/2010/4.mp3">Kiss With A Fist - Florence and the Machine</a></li>

<li><a href="http://jeremyhubert.com/m/2010/5.m4a">Little Lion Man - Mumford &amp; Sons</a></li>

<li><a href="http://jeremyhubert.com/m/2010/6.mp3">Home - Edward Sharpe and the Magnetic Zeros</a></li>

<li><a href="http://jeremyhubert.com/m/2010/7.mp3">Sweet Sixteen - Think About Life</a></li>

<li><a href="http://jeremyhubert.com/m/2010/8.mp3">28 - Nano Whitman</a></li>

<li><a href="http://jeremyhubert.com/m/2010/9.mp3">Dance Song - Orchard</a></li>

<li><a href="http://jeremyhubert.com/m/2010/10.mp3">Punctual As Usual - The Parson Red Heads</a></li>

<li><a href="http://jeremyhubert.com/m/2010/11.mp3">Man of a Thousand Faces - Regina Spektor</a></li>

<li><a href="http://jeremyhubert.com/m/2010/12.mp3">Fader - The Temper Trap</a></li>

<li><a href="http://jeremyhubert.com/m/2010/13.m4a">The Great Defector - Bell X1</a></li>

<li><a href="http://jeremyhubert.com/m/2010/14.mp3">Dying Is Fine - Ra Ra Riot</a></li>

<li><a href="http://jeremyhubert.com/m/2010/15.m4a">Bang! Bang! - The Knux</a></li>

<li><a href="http://jeremyhubert.com/m/2010/16.mp3">Wish I Stayed - Ellie Goulding</a></li>

<li><a href="http://jeremyhubert.com/m/2010/17.mp3">I&#8217;ll Kill Her - SoKo</a></li>

<li><a href="http://jeremyhubert.com/m/2010/18.mp3">Paris - Friendly Fires</a></li>

<li><a href="http://jeremyhubert.com/m/2010/19.mp3">Edward Is Dedward - Emmy The Great</a></li>

<li><a href="http://jeremyhubert.com/m/2010/20.mp3">Why Do You Let Me Stay Here? - She &amp; Him</a></li>

<li><a href="http://jeremyhubert.com/m/2010/21.mp3">Untouched - The Veronicas</a></li>

</ol>


<p>Also, please don&#8217;t just download the songs. All of these artists are hardworking and deserve your dollars. You should be able to find most of them on iTunes. :)</p>




<ol></ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 3 - Removing or adding www in the url]]></title>
    <link href="http://jhubert.github.io/blog/2011/01/11/removing-or-adding-www-in-a-rails-url/"/>
    <updated>2011-01-11T00:00:00-08:00</updated>
    <id>http://jhubert.github.io/blog/2011/01/11/removing-or-adding-www-in-a-rails-url</id>
    <content type="html"><![CDATA[<p>I don&#8217;t like having two separate domains that point to the same content for a number of reasons. Caching and SEO optimization are two them that make it worth dealing with for me. Here is how I deal with that in Rails 3.</p>




<p>Usually, I would handle this in my webserver config file but since I&#8217;ve started using Heroku I don&#8217;t have access to a config file so the Rails application needs to handle that for me.</p>




<p>One way to do the redirect is to have some code in your application_controller.rb file that checks for www. and then behaves accordingly. Like this:</p>


<p><div>
  <pre><code class='ruby'>before_filter :strip_www&lt;/p&gt;

&lt;p&gt;def strip_www
  if request.env[&quot;HTTP_HOST&quot;] == &quot;myapp.com&quot;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;redirect_to &quot;http://www.myapp.com/&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;  end
end</code></pre>
</div>
</p>

<p>This functions just fine, however, there is no need to load the entire application stack just to do a redirection.</p>




<p>Fortunately, Rails runs on Rack which means you can run some pretty awesome middleware and a few of the guys over at <a href="http://pivotallabs.com/">pivotal labs</a> have done just that.</p>




<p>Enter <a href="https://github.com/pivotal/refraction">Refraction</a>.</p>




<p>Refraction is a piece of middleware that gives you a router before the request reaches your main application stack, which means you can intercept the call and perform a redirect on it without loading a bunch of unnecessary code. You can read a lot more about it in the <a href="https://github.com/pivotal/refraction">README file on GitHub</a>.</p>




<p>All I&#8217;m going to show you here is how to ADD &#8220;www.&#8221; to a request that doesn&#8217;t have it. These instructions are fairly similar to the README.md, with the exception of the refraction_rules and a small change to the production.rb call.</p>




<p>First, install the refraction gem. I recommend adding &#8220;<strong>gem &#8216;refraction&#8217;</strong>&#8221; to your Gemfile and running &#8220;<strong>bundle install</strong>&#8221; in your app. This will also install it on Heroku when you push.</p>




<p>Once you have done that, we are going to add the following call near the top of your <strong>config/environments/production.rb</strong> file:</p>


<p><div>
  <pre><code class='ruby'>config.middleware.insert_before(::Rack::Lock, ::Refraction)</code></pre>
</div>
</p>

<p>and then create a new file inside the <strong>config/initializers/</strong> folder called <strong>refraction_rules.rb</strong> that has the following content in it:</p>


<p><div>
  <pre><code class='ruby'>Refraction.configure do |req|
  req.permanent! :host =&gt; &quot;www.mydomain.com&quot; if req.host !~ /&lt;sup&gt;www./&lt;/sup&gt;
end</code></pre>
</div>
</p>

<p>Once that&#8217;s done, you should be good to go. I tested this on my dev box by setting my <strong>/etc/hosts</strong> file up to point <a href="http://www.mydomain.com">www.mydomain.com</a> and mydomain.com to 127.0.0.1 which should work nicely for testing. :)</p>




<p>Good luck!</p>

]]></content>
  </entry>
  
</feed>
